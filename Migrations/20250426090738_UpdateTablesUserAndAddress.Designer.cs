// <auto-generated />
using System;
using LodgerBackend.App.Configuration.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LodgerBackend.Migrations
{
    [DbContext(typeof(LodgerDbContext))]
    [Migration("20250426090738_UpdateTablesUserAndAddress")]
    partial class UpdateTablesUserAndAddress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LodgerBackend.App.Auth.Models.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AccesTokenExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("acces_token_expiration");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_revoked");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("LodgerBackend.App.Auth.Models.Entities.ResetPasswordRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("reset_password_request");
                });

            modelBuilder.Entity("LodgerBackend.App.Device.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("devices");
                });

            modelBuilder.Entity("LodgerBackend.App.Document.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("document_type_id");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("documents");
                });

            modelBuilder.Entity("LodgerBackend.App.Document.Models.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("document_type");
                });

            modelBuilder.Entity("LodgerBackend.App.Payment.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("LodgerBackend.App.RentalFile.RentalFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FamilyStatus")
                        .HasColumnType("integer")
                        .HasColumnName("family_status");

                    b.Property<int>("Garant")
                        .HasColumnType("integer")
                        .HasColumnName("garant");

                    b.Property<decimal>("NetMonthlyIncome")
                        .HasColumnType("numeric")
                        .HasColumnName("net_monthly_income");

                    b.Property<decimal>("NetMonthlyIncomeGarant")
                        .HasColumnType("numeric")
                        .HasColumnName("net_monthly_income_garant");

                    b.Property<bool>("Pets")
                        .HasColumnType("boolean")
                        .HasColumnName("pets");

                    b.Property<int>("RoommatesNb")
                        .HasColumnType("integer")
                        .HasColumnName("roomates_nb");

                    b.Property<bool>("Smoker")
                        .HasColumnType("boolean")
                        .HasColumnName("smoker");

                    b.Property<int>("StatusPro")
                        .HasColumnType("integer")
                        .HasColumnName("status_pro");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("rental_files");
                });

            modelBuilder.Entity("LodgerBackend.App.Settings.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<bool>("NotificationsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("notifications_enabled");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("theme");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("settings");
                });

            modelBuilder.Entity("LodgerBackend.App.User.Models.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_name");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code_postal");

                    b.HasKey("Id");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("LodgerBackend.App.User.Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("LodgerBackend.App.User.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<bool>("Is2FA")
                        .HasColumnType("boolean")
                        .HasColumnName("is2fa");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Nationality")
                        .HasColumnType("integer")
                        .HasColumnName("nationality");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<int?>("RentalFileId")
                        .HasColumnType("integer")
                        .HasColumnName("rental_file_id");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("RentalFileId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("LodgerBackend.App.User.Models.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("LodgerBackend.App.Device.Models.Device", b =>
                {
                    b.HasOne("LodgerBackend.App.User.Models.Entities.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LodgerBackend.App.Document.Models.Document", b =>
                {
                    b.HasOne("LodgerBackend.App.Document.Models.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LodgerBackend.App.User.Models.Entities.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LodgerBackend.App.Payment.Models.Payment", b =>
                {
                    b.HasOne("LodgerBackend.App.User.Models.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LodgerBackend.App.RentalFile.RentalFile", b =>
                {
                    b.HasOne("LodgerBackend.App.User.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LodgerBackend.App.Settings.Models.Settings", b =>
                {
                    b.HasOne("LodgerBackend.App.User.Models.Entities.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("LodgerBackend.App.Settings.Models.Settings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LodgerBackend.App.User.Models.Entities.User", b =>
                {
                    b.HasOne("LodgerBackend.App.User.Models.Entities.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId");

                    b.HasOne("LodgerBackend.App.RentalFile.RentalFile", "RentalFile")
                        .WithMany()
                        .HasForeignKey("RentalFileId");

                    b.Navigation("Address");

                    b.Navigation("RentalFile");
                });

            modelBuilder.Entity("LodgerBackend.App.User.Models.Entities.UserRole", b =>
                {
                    b.HasOne("LodgerBackend.App.User.Models.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LodgerBackend.App.User.Models.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LodgerBackend.App.Document.Models.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("LodgerBackend.App.User.Models.Entities.Address", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LodgerBackend.App.User.Models.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LodgerBackend.App.User.Models.Entities.User", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Documents");

                    b.Navigation("Payments");

                    b.Navigation("Settings");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
